---
kind: Template
apiVersion: v1
metadata:
  name: nodejs-app
  annotations:
    description: "This is a deployment of a simple nodejs app using Templates"
objects:
  # Redis
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${REDIS_SVC_NAME}
    spec:
      ports:
        - name: db
          port: 6379
          targetPort: 6379
      selector:
        name: ${REDIS_PO_NAME}
        docker-registry: default
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${REDIS_DC_NAME}
      annotations:
        description: Defines how to deploy the db server
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
          type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${REDIS_CONT_NAME}
            from:
              kind: ImageStreamTag
              name: redis:latest
              namespace: openshift
      replicas: 1
      selector:
        name: ${REDIS_PO_NAME}
      template:
        metadata:
          name: ${REDIS_PO_NAME}-template
          labels:
            name: ${REDIS_PO_NAME}
            docker-registry: default
        spec:
          containers:
            - name: ${REDIS_CONT_NAME}
              image: " "
              ports:
                - containerPort: 6379
                  protocol: TCP
              resources:  # Limits CPU, RAM, etc
                memory: ${MEMORY_LIMIT}
                
  # NodeJS
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NODEJS_IS_NAME} 
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NODEJS_BC_NAME}
      annotations:
        description: Defines how to build the application server
        template.alpha.openshift.io/wait-for-ready: "true"
        service.alpha.openshift.io/dependencies: "[{\"name\": \"redis-svc\", \"kind\": \"Service\"}]"
    spec:
      source:
        type: Git
        git:
          uri: ${GIT_REPOSITORY}
          ref: ${REPOSITORY_BRANCH}
        contextDir: ${APP_SRC_DIR}
      strategy:
        sourceStrategy:
          type: Source
          from:
            kind: ImageStream
            name: nodejs
            namespace: aisi-2019
          pullSecret:
            name: builder-dockercfg-w8vz2
      serviceAccount: builder
      postCommit:
        script: npm test
      output:
        to:
          kind: ImageStreamTag
          name: ${NODEJS_IS_NAME}:latest
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: GitHub
          github:
            secret: ${GITHUB_WEBHOOK_SECRET}
  - kind: Service
    apiVersion: v1
    metadata: 
      name: ${NODEJS_SVC_NAME}
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: ${NODEJS_PO_NAME}
        docker-registry: default
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${NODEJS_ROUTE_NAME}
      annotations:
        description: Defines which service to expose
    spec:
      to:
        kind: Service
        name: ${NODEJS_SVC_NAME}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NODEJS_DC_NAME}
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NODEJS_CONT_NAME}
            from:
              kind: ImageStreamTag
              name: ${NODEJS_IS_NAME}:latest
      replicas: 3
      selector:
        name: ${NODEJS_PO_NAME}
      template:
        metadata:
          name: ${NODEJS_PO_NAME}-template
          labels:
            name: ${NODEJS_PO_NAME}
            docker-registry: default
        spec:
          containers:
            - name: ${NODEJS_CONT_NAME}
              image: " "
              env:
                - name: REDIS_ADDR
                  value: ${REDIS_SVC_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:  
                limits: # Limits CPU, RAM, etc
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 3
                httpGet:
                  path: /heartbeat
                  port: 8080
              livenessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 30
                httpGet:
                  path: /heartbeat
                  port: 8080
              
parameters:
# Global parameters
  - description: Projects' name
    displayName: "Project Name"
    name: PROJECT_NAME
    required: true
    value: aisi-2019
  - description: Indicates de url to the GitHub repository from where to pull the source code
    displayName: "GitHub Repository"
    name: GIT_REPOSITORY
    required: true
    value: https://github.com/msantpine/AISI-Openshift.git
  - description: Sets the branch of the repository
    displayName: "Repository Branch"
    name: REPOSITORY_BRANCH
    required: true
    value: master
  - description: GitHub WebHook
    displayName: "GitHub WebHook"
    required: true
    name: GITHUB_WEBHOOK_SECRET
    generate: expression
    from: "[a-zA-Z0-9]{40}"
  - description: Indicates the directory where the source code is in the repository
    displayName: "Source Code Directory"
    name: APP_SRC_DIR
    required: true
    value: "src/"
  - description: Sets a limit to the size of the cpu allocated for each pod
    displayName: "CPU Limit"
    name: CPU_LIMIT
    required: true
    value: 200m
  - description: Sets a limit to the size of the ram allocated for each pod
    displayName: "Memory Limit"
    name: MEMORY_LIMIT
    required: true
    value: 256Mi

  # Redis related
  - description: Redis container
    displayName: "Redis Container Name"
    name: REDIS_CONT_NAME
    required: true
    value: redis-cont
  - description: Name which will receive redis' deployment configure
    displayName: "Redis Deployment Config Name"
    name: REDIS_DC_NAME
    required: true
    value: redis-dc
  - description: Name that will receive the service of redis
    displayName: "Redis Service Name"
    name: REDIS_SVC_NAME
    required: true
    value: redis-svc
  - description: Name of redis pods
    displayName: "Redis Pods Name"
    name: REDIS_PO_NAME
    required: true
    value: redis-po

  # NodeJS related
  - description: Name that will receive the image stream for the nodejs image
    displayName: "NodeJS Image Stream Name"
    name: NODEJS_IS_NAME
    required: true
    value: nodejs-is
  - description: NodeJS container
    displayName: "NodeJS Container Name"
    name: NODEJS_CONT_NAME
    required: true
    value: nodejs-cont
  - description: Name which will receive nodejs' deployment configure
    displayName: "NodeJS Deployment Config Name"
    name: NODEJS_DC_NAME
    required: true
    value: nodejs-dc
  - description: Name that will receive the route which exposes nodejs' service
    displayName: "NodeJS Route Name"
    name: NODEJS_ROUTE_NAME
    required: true
    value: nodejs-route
  - description: Name that will receive the service of nodejs
    displayName: "NodeJS Service Name"
    name: NODEJS_SVC_NAME
    required: true
    value: nodejs-svc
  - description: Name of the Building configuration of nodejs
    displayName: "NodeJS Building Config Name"
    name: NODEJS_BC_NAME
    required: true
    value: nodejs-bc
  - description: Name of the pods
    displayName: "NodeJS Pods Name"
    name: NODEJS_PO_NAME
    required: true
    value: nodejs-po
  