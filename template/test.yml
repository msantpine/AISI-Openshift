---
kind: Template
apiVersion: v1
metadata:
  name: deployment-test
  annotations:
    description: "This is a deployment test using Templates"
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NODEJS_IS_NAME} 
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NODEJS_BC_NAME}
      annotations:
        description: Defines how to build the application server
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        sourceStrategy:
          type: Source
          from:
            kind: DockerImage
            name: msantpine/nodejs:latest
          pullSecret:
            name: docker-secret
      serviceAccount: builder
      postCommit:
        script: npm test
      output:
        to:
          kind: ImageStreamTag
          name: ${NODEJS_IS_NAME}:latest
      triggers:
        - type: ImageChange
          type: ConfigChange
  - kind: Service
    apiVersion: v1
    metadata: 
      name: ${NODEJS_SRV_NAME}
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: ${NODEJS_PO_NAME}
        docker-registry: default
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${NODEJS_ROUTE_NAME}
      annotations:
        description: Defines which service to expose
    spec:
      to:
        kind: Service
        name: ${NODEJS_SRV_NAME}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: nodejs-dc
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
          type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - nodejs-cont
            from:
              kind: ImageStreamTag
              name: ${NODEJS_IS_NAME}:latest
      replicas: 3
      selector:
        name: ${NODEJS_PO_NAME}
      template:
        metadata:
          name: {NODEJS_PO_NAME}-template
          labels:
            name: ${NODEJS_PO_NAME}
            docker-registry: default
        spec:
          containers:
            - name: nodejs-cont
              image: " "
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:  # Limits CPU, RAM, etc
                memory: ${MEMORY_LIMIT}
              readinessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 3
                httpGet:
                  path: /heartbeat
                  port: 8080
              livenessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 30
                httpGet:
                  path: /heartbeat
                  port: 8080
parameters:
  # NodeJS related
  - description: Name that will receive the image stream for the nodejs image
    displayName: NodeJSIsName
    name: NODEJS_IS_NAME
    required: true
    value: nodejs-is
  - description: Name that will receive the route which exposes nodejs' service
    displayName: NodeJSRouteName
    name: NODEJS_ROUTE_NAME
    required: true
    value: nodejs-route
  - description: Name that will receive the service of nodejs
    displayName: NodeJSSrvName
    name: NODEJS_SRV_NAME
    required: true
    value: nodejs-srv
  - description: Name of the Building configuration of nodejs
    displayName: NodeJSBcName
    name: NODEJS_BC_NAME
    required: true
    value: nodejs-bc
  - description: Name of the pods
    displayName: PodsName
    name: NODEJS_PO_NAME
    required: true
    value: nodejs-po
  
    # Global parameters
  - description: Sets a limit to the size of the ram allocated for each pod
    displayName: MemoryLimit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi